# incoming queue name from jmsCopy topology
qnue.incoming.queue=${env.conf.rabbitmq.qnue.incomingQueue:qnue-incoming}

# incoming queue name from services 
qnue.services.incoming.queue=${env.conf.rabbitmq.service.incomingQueue:qnue-servicesEvent}

# incoming queue name from retryables errors (internal)
qnue.incoming.retry.queue=${env.conf.rabbitmq.qnue.incomingRetryQueue:qnue-incoming_retry}

# incoming queue name from messages parser
qnue.incoming.message.parser.queue=${env.conf.rabbitmq.qnue.incomingMessageParser.incoming:qnue-incoming-message_parser}

# incoming queue name from messages parser main
qnue.message.parser.main.incoming.queue=${env.conf.rabbitmq.qnue.messageParserMain.incoming:qnue-message_parser_main}

# incoming queue name from messages parser history
qnue.message.parser.history.incoming.queue=${env.conf.rabbitmq.qnue.messageParserHistory.incoming:qnue-message_parser_history}

# routingKey for retryables error messages (internal) 
qnue.incoming.retry.outgoing.routingKey=${env.conf.rabbitmq.qnue.retry.incoming.routingKey:qnue-incoming-retry_delay}

# incoming queue name from redeliverables errors (internal)
qnue.retry.queue=${env.conf.rabbitmq.qnue.retry.routingKey:qnue-retry}

# routing key used for redeliverables messages publications
qnue.retry.outgoin.routingKey=${env.conf.rabbitmq.qnue.retry.delay.routingKey:qnue-retry_delay}

# routing key used for delivery severals events for each happening 
qnue.multi.events.delivery.routingKey=${env.conf.rabbitmq.qnue.internal.queue:qnue-internal}
# queue name for publish severals events for each happening 
qnue.multi.events.queue=${env.conf.rabbitmq.qnue.internal.queue:qnue-internal}

# routing key for error messages publications 
qnue.error.routingKey=${env.conf.rabbitmq.qnue.error.routingKey:qnue-incoming_error}

# default qnue exchange for rabbitMQ publications
qnue.exchange.default=${env.conf.rabbitmq.qnue.qnueExchange:qnue.direct}

# default qnue exchange for rabbitMQ publications
qnue.exchange.error=${aaa.bbb.ccc:error.direct}

# exchange for happening history monitoring
qnue.exchange.monitoring.happenings=${env.conf.rabbitmq.monitoring.happenings.exchange:qnue.happenings.topic}
# exchange for events history monitoring
qnue.exchange.monitoring.events=${env.conf.rabbitmq.monitoring.events.exchange:qnue.events.topic}

qnue.monitoring.happenings.routingkey=${env.conf.rabbitmq.monitoring.happenings.routingkey:qnue.monitoring}
qnue.monitoring.events.routingkey=${env.conf.rabbitmq.monitoring.events.routingkey:qnue.monitoring}

# default general routing key
qnue.routingKey.default=${env.conf.rabbitmq.default.routingKey:default}

# crm exchange messages publications
qnue.crm.exchange=${env.conf.rabbitmq.crm.shoppingEvent.exchange:${qnue.exchange.default}}
# crm routing key for shopping events publications 
qnue.crm.shoppings.routingKey=${env.conf.rabbitmq.crm.shoppingEvent.routingKey:${qnue.exchange.default}}
# crm routing key for login events publications
qnue.crm.login.routingKey=${env.conf.rabbitmq.crm.loginEvent.routingKey:kdcp-shoppingEvent}

# open platform events publications
qnue.openplatform.routingKey=${env.conf.rabbitmq.openplatform.routingKey:eksp-events}
# open platform events exchange
qnue.openplatform.exchange=${env.conf.rabbitmq.openplatform.exchange:qnue.direct}

qnue.n2m.happenings.routingKey=${env.conf.rabbitmq.qnue.n2m.happeningsRoutingKey:qnue-n2m}
qnue.n2m.events.routingKey=${env.conf.rabbitmq.qnue.n2m.eventsRoutingKey:qnue-n2m}

#Default output queue
qnue.output.exchange=${env.conf.rabbitmq.qnue.output.exchange:qnue.direct}
qnue.output.routingKey=${env.conf.rabbitmq.qnue.output.routingKey:qnue-output}